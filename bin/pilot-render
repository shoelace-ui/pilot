#!/usr/bin/env node

var fs = require('fs');
var pkg = require(process.cwd() + '/package.json');
var program = require('commander');
var jade = require('jade').renderFile.bind(null, __dirname + '/../lib/templates/index.jade');
var markdown = require('github-flavored-markdown').parse;

var lib = require('..');

// cli
program
  .version(require('../package.json').version)
  .option('-o, --out [path]', 'optional path to write')
  .parse(process.argv);

var arg = program.args[0];

var raw = fs.readFileSync(arg, 'utf8');
var parsed = lib.parseComments(raw, {raw: true});
var public = parsed;
// var public = parsed.filter(function(p){ return p })

var vars = public
  .filter(function(p){ return p.ctx && p.ctx.type === 'public variable'})
  .map(function(v){
    var out = {
      name: v.ctx.name,
      value: v.ctx.value,
      examples: []
    };
    return out;
  });

var fns = public
  .filter(function(p){ return p.ctx && p.ctx.type === 'public function'})
  .map(function(fn){
    var md = markdown(fn.description.summary);
    var args = markdown(fn.ctx.string);
    var out = {
      name: fn.ctx.name,
      string: args,
      value: fn.ctx.value,
      examples: fn.examples,
      summary: md,
      tags: fn.tags
    };
    return out;
  });

var defaults = [
    'html'
  , 'body'
  , '  font-family "Monaco", "Menlo", monospace',
  , '  font-size 12px'
  , '  color rgba(0,49,3, 0.9)'
  , '  margin 0'
  , ''
].join('\n');

var locals = {
  preload: defaults + raw,
  pkg: pkg,
  sections: [
    {
      name: 'variables',
      defs: vars
    },
    {
      name: 'functions',
      defs: fns
    }
  ]
};

var data = jade({globals: locals});

write(data);

function write(data) {
  if (!program.out) return process.stdout.write(data);
  fs.writeFileSync(program.out || 'styleguide.html', data);
}
